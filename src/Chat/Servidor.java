
package Chat;

//servidor.java

import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;
import javax.swing.text.DefaultCaret;
import org.apache.log4j.Logger;
import org.apache.log4j.PropertyConfigurator;

/**
 *
 * @author Administrador
 */
public class Servidor extends javax.swing.JFrame {
    int cont=1;
    String [] ips;
    /**
     * Creates new form servidor
     */
    public Servidor() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("SERVIDOR DEL CHAT");

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 139, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>                        


    public void start_server(){
        // Carga el archivo de configuracion de log4J
        PropertyConfigurator.configure("log4j.properties");        
        Logger log = Logger.getLogger(Servidor.class);
        //actualizar el scroll
        DefaultCaret caret = (DefaultCaret)jTextArea1.getCaret();
        caret.setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);
        
        int puerto = 1234;
        int maximoConexiones = 10; // Maximo de conexiones simultaneas
        ServerSocket servidor = null; 
        Socket socket = null;
        MensajesChat mensajes = new MensajesChat();
        
        try {
            // Se crea el serverSocket
            servidor = new ServerSocket(puerto, maximoConexiones);
            
            // Bucle infinito para esperar conexiones
            while (true) {
                jTextArea1.append("Servidor a la espera de conexiones."+System.lineSeparator());
                socket = servidor.accept();
                jTextArea1.append("Cliente con la IP " + socket.getInetAddress().getHostName() + " conectado."
                    +System.lineSeparator());
                ConexionCliente cc = new ConexionCliente(socket, mensajes,jTextArea1);
                cc.start();
            }
        }catch (IOException ex) {
            jTextArea1.append("Error: " + ex.getMessage()+System.lineSeparator());
        }finally{
            try {
                socket.close();
                servidor.close();
            } catch (IOException ex) {
                jTextArea1.append("Error al cerrar el servidor: " + ex.getMessage()+System.lineSeparator());
            }
        }
    }
    
    public static void main(String args[]) {
        Servidor objServer= new Servidor();
        objServer.setVisible(true);
        objServer.start_server();
    }

    // Variables declaration - do not modify                     
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration                   
}


